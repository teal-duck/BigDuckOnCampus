- Added Collidable.floorDiv() so it's compatible with < Java 8

- Run Eclipse source cleanup on project

- Commented out unused variables

- Renaming variables to consistent style (lowerCamelCase)

- Changing some variables to use enums
	- RoomType
	- AttackType
	- EnemyShotType
	- MovementType
	- ObjectiveType
	- LevelType
		- Changed MuscovyGame.mapSelected to use this
		- Levels are 0-7 but mapSelected was 1-8
		- Updated the logic for this
	- GameState
	- PlayerShotType
	- ProjectileDamager (need to think of better name for this)
	
- Trying to cleanup magic numbers
	- Coordinates for rendering between relative to the window size
	
- Changed "float x, y, xVelocity, yVelocity, angle;" etc to use Vector2 position, velocity

- Created shootProjectiles() static function in projectile class to remove duplicate of logic
	- Player and enemy now use this as it handles bullet spread for multiple shots
	
- Created TextureMap, changed all texture loading to use it instead so they can be disposed
	- Originally, for every entity and bullet, the texture was reloaded from file every time it was used
		- Slows game down
		- Wastes memory
	- Now the getTextureOrLoadFile method only loads the texture the first time it is requested
		- Else just returns the already loaded instance
	- TextureMap.disposeAllTextures() called in MuscovyGame.dispose() (i.e. when the game window closes)

- Player clampVelocity now uses velocity.limit() instead of changing components
	- Mathematically correct, but changes gameplay

- Boss now spawns in a random room
	- Used to pick the first room it found with only 1 neighbour, starting in bottom left
	- Now builds a list of all potential rooms (only 1 neighbour), then picks a random one
	
- Boss parameters (move speed, shot speed) being changed

- Now renders a map overlay
	- Graphics need to be changed
	- Helpful for debugging

- Map overlay now shows doors

- Level generation parameterized
	- Takes the size of the world to make etc as parameters
	- Parameters are calculated based on which level it is
	
- Made parameter order for (x, y) consistent

- Moved boss spawn location up
	- Before if the player entered the boss room from below, they'd walk right into the boss
	
- Started to make level completion checking be based on the objective for the level

- Room templates are now loaded from a CSV file
	- The format is a bit awkward right now, but it's functional
	
- Entities now take their position in the constructor, passed up inheritance tree

- Dungeon room no longer inherits from OnscreenDrawable
	- Only inherited before to use a sprite for the background

- Possibly improved performance of sorting drawables
	- Removed unnecessary operations
	
- Shop and item room now only have 1 neighbour

- Created MoveableEntity class
	- Enemy and player extend from it
	- Should projectile extend it? It uses velocity but the collision is different
	
- Started to remake player movement

- Controls now use our control map from previous game

- Replaced GameState enum with LibGDX screens
	- Very big change
	- Switch statements in MuscovyGame replaced with polymorphism
	- Gui instances owned by the relevant screens
	- Entity manager and player are created/owned by game screen
		- Need to be able to pass player stats to game screen
		- As player gets recreated each time game screen gets entered, stats are reset
	- Input moved to screens
		- MuscovyGame no longer implements InputProcessor
	- MuscovyGame instance gets passed around a lot
		- Has getters for a lot of data
	- Makes it easier to add more screens for e.g. settings menu
	
- Added transition animation between screens

- For debug, render a grid over the world
	- Shows that entities aren't spawning on tile coordinates correctly
	- Fixed that bug
	- Doors also weren't in the middle of the walls
	
- Put level name and objective on the screen

- Created items to act as powerups and health restore etc.

- Saving and loading

- Pause GUI

- Enemies flash when they take damage

- Player and enemies use acceleration and friction

- Enemies bounce off obstacles

- Randomized how often enemies shoot

- Enemy bullets look different to player's


Other possible things to do:
- When enemies are in bottom corners, player can't shoot them from the side
- Collision could maybe use our code from featherline york?
- Player and enemy projectiles should look different
- Should split the entity manager class up as it does a lot in 1 class
- Randomise enemies more so they don't all shoot at the same time
- Animations
- GameScreen needs to know about the player statistics (e.g. health and abilities) when creating the player instance
- Should it be possible for ranged enemies to only do damage via bullets?
	- Or should it be merged with AttackType.BOTH?
	- And should static enemies be able to be pushed around by the player?
- DungeonRoom.setHasUpDoor etc should maybe generate the door rect?
- In GameScreen.enemiesUpdate(), the collision functions get called twice